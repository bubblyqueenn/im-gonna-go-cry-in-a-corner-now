import discord
from discord.ext import tasks, commands
import requests
import asyncio
from selenium import webdriver
from selenium.webdriver.edge.service import Service as EdgeService
from selenium.webdriver.edge.options import Options
from webdriver_manager.microsoft import EdgeChromiumDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import concurrent.futures

# Bot token and channel/user IDs
TOKEN = 'REDACTED'  # Replace with your actual bot token
CHANNEL_ID = 1095597543867564122 
USER_ID = 886285955416338442  


async def get_data_with_selenium():
    with concurrent.futures.ThreadPoolExecutor() as pool:
        result = await bot.loop.run_in_executor(pool, synchronous_selenium_function)
        return result

intents = discord.Intents.default()
intents.messages = True  # Make sure to enable intents in the Discord Developer Portal as well

bot = commands.Bot(command_prefix="!", intents=intents)

@bot.event
async def on_ready():
    print(f'Logged in as {bot.user.name}')

@bot.slash_command(description="Generate Whiteboard")
async def example(ctx)whiteboard_link = create_whiteboard_link()
    await ctx.respond(f'Here is your new whiteboard link: {whiteboard_link}')

async def setup():
    # Your setup tasks for Selenium or other setup steps
    pass

bot.loop.create_task(setup())
bot.run(TOKEN)




# Initialize Edge options
edge_options = Options()
edge_options.add_argument("--headless")  
edge_options.add_argument("--disable-gpu")
edge_options.add_argument("--no-sandbox")
edge_options.add_argument("--disable-dev-shm-usage")

# Initialize the driver
driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=edge_options)

intents = discord.Intents.default()
intents.message_content = True  # Necessary if you're handling messages
bot = commands.Bot(command_prefix='!', intents=intents)

bot = commands.Bot(command_prefix="!", intents=intents)

last_message_id = None

@bot.event
async def on_ready():
    print(f'Logged in as {bot.user.name}')
    send_whiteboard.start()

from selenium import webdriver
from selenium.webdriver.edge.service import Service
from selenium.webdriver.edge.options import Options
from webdriver_manager.microsoft import EdgeChromiumDriverManager
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By

def create_whiteboard_link():
    driver = None  
    try:
        # Initialize the Edge driver using the WebDriver manager without specifying a path
        service = Service(EdgeChromiumDriverManager().install())
        edge_options = Options()
        driver = webdriver.Edge(service=service, options=edge_options)
        
        # Navigate to the whiteboard URL
        driver.get("https://r8.whiteboardfox.com/")

        # Initialize WebDriverWait
        wait = WebDriverWait(driver, 10)

        # Wait for the "Start Drawing" button to be present and click it
        start_drawing_button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "a[onclick*='showOptions()']")))
        start_drawing_button.click()

        # Wait for the "optionsEl" element to be visible
        options_el = wait.until(EC.visibility_of_element_located((By.ID, "optionsEl")))

        # Optionally, click the "optionsEl" element to make sure it is visible
        options_el.click()

        # Interact with other elements within the optionsEl if needed
        textbox = wait.until(EC.presence_of_element_located((By.ID, "textbox_id")))
        textbox.send_keys("ExampleWhiteboardName")  # Replace with the actual input needed

        # Select the "Draw and erase anything" option
        draw_and_erase_anything_option = wait.until(EC.element_to_be_clickable((By.ID, "editFull")))
        draw_and_erase_anything_option.click()

        submit_button = wait.until(EC.element_to_be_clickable((By.ID, "submitFormButton")))
        submit_button.click()

        # Wait for the URL to update (indicating the whiteboard has been created)
        WebDriverWait(driver, 10).until(lambda d: "whiteboardfox.com" in d.current_url)
        whiteboard_url = driver.current_url

        # Extract the whiteboard ID from the URL
        whiteboard_id = whiteboard_url.split("/")[-1]

        print(f"Whiteboard ID: {whiteboard_id}")
        return f"https://whiteboardfox.com/{whiteboard_id}"

    except Exception as e:
        # Handle any exceptions that might occur
        print(f"An error occurred: {e}")
        return None

    finally:
        # Close the driver if it's been initialized
        if driver:
            driver.quit()



import discord
from discord.ext import tasks, commands

# Set up intents and bot instance
intents = discord.Intents.default()
intents.messages = True
bot = commands.Bot(command_prefix="!", intents=intents)

# Global variable to store the last message ID for deletion
last_message_id = None

@bot.event
async def on_ready():
    print(f'Logged in as {bot.user.name}')

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    # Check for specific keyword responses
    content = message.content.lower()
    if "foxy marko" in content:
        await message.channel.send("pollo")
    elif "you there foxy?" in content:
        await message.channel.send("if I'm responding then yeah")
    elif "hey foxy, can i get a whiteboard?" in content:
        whiteboard_link = create_whiteboard_link()
        await message.channel.send(f"Here is your whiteboard link: {whiteboard_link}")
    elif "hey foxy, can you automate my whiteboards?" in content:
        await message.channel.send("Starting automated whiteboard generation!")
        send_whiteboard.start()

    # Process commands
    await bot.process_commands(message)

@bot.command(name='whiteboard')
async def whiteboard(ctx):
    whiteboard_link = create_whiteboard_link()
    if whiteboard_link:
        await ctx.send(f'Here is your new whiteboard link: {whiteboard_link}')
    else:
        await ctx.send('Failed to create a whiteboard link.')

@bot.command(name='ping')
async def ping(ctx):
    await ctx.send('Pong!')

@bot.command(name='doyoulikesage')
async def doyoulikesage(ctx):
    await ctx.send('ew! no.')

@bot.command(name='fuckyoufoxy')
async def fuckyoufoxy(ctx):
    await ctx.send('I m gonna tickle your toes lil bro')

@bot.command(name='hi')
async def hi(ctx):
    await ctx.send('hey! :)')

@bot.slash_command(description="Retrieve a whiteboard link.")
async def retrievewhiteboard(ctx):
    whiteboard_link = create_whiteboard_link()
    await ctx.respond(f"Here is your whiteboard link: {whiteboard_link}")

@bot.slash_command(description="Automate whiteboard generation every 14 days.")
async def whiteboardauto(ctx):
    await ctx.respond("Starting automated whiteboard generation!")
    send_whiteboard.start()

@bot.slash_command(description="Stop the automated whiteboard generation.")
async def stopauto(ctx):
    send_whiteboard.stop()
    await ctx.respond("Automated whiteboard generation has been stopped.")

@tasks.loop(hours=24)
async def send_whiteboard():
    global last_message_id
    if send_whiteboard.current_loop % 14 == 0:  # Every 14 days
        channel = bot.get_channel(CHANNEL_ID)
        user = f'<@{USER_ID}>'
        whiteboard_link = create_whiteboard_link()
        if last_message_id:
            try:
                previous_message = await channel.fetch_message(last_message_id)
                await previous_message.delete()
            except discord.NotFound:
                print("Previous message not found. It might have been deleted already.")

        if whiteboard_link:
            new_message = await channel.send(f'Hello {user}, here is your new whiteboard link: {whiteboard_link}')
            await new_message.pin()
            last_message_id = new_message.id
        else:
            await channel.send("There was an error creating the whiteboard link.")

def create_whiteboard_link():
    # Your Selenium code to create and return the whiteboard link
    return "https://example.com/your_whiteboard_link"
# Example command using the traditional prefix
@bot.command(name='foxy, do you like the gays')
async def hello(ctx):
    await ctx.send('absolutely not')

# Run the bot
bot.run('REDACTED')
