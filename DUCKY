# NOTE. im prob not gonna add comments bc im lazy LMAOOO. this code makes a bot that logs messages from users, but doesnt log any messages that are proxied. this is possible bc it checks for any messages sent by webhooks that have the samee message content. it also does verifications yap yap im lazy


import discord
from discord.ext import commands, tasks
from collections import deque
import time
from datetime import datetime
import Levenshtein
from discord.ext import commands
from discord.ui import Button, View
import json
import os


## Set up bot with necessary intents
intents = discord.Intents.default()
intents.message_content = True
intents.messages = True
bot = commands.Bot(command_prefix="!", intents=intents)

# Constants and settings
unverified_role_id = 1234567890212345678
verified_role_id = 123456789012345667
CACHE_TTL = 60  # Time-to-live for cached messages in seconds
SIMILARITY_THRESHOLD = 0.7  # Threshold for similarity (adjust as needed)
LOGS_FILE = "logs123.json"  # JSON file for storing public log channels
webhook_cache = deque()  # Stores (timestamp, content) tuples
print(f"Checking webhook cache: {webhook_cache}")


#region Load or initialize log channels from the JSON file
if os.path.exists(LOGS_FILE):
    with open(LOGS_FILE, "r") as f:
        log_channels = json.load(f)
else:
    log_channels = {}

def save_log_channels():
    """Save the log channels dictionary to a JSON file."""
    with open(LOGS_FILE, "w") as f:
        json.dump(log_channels, f, indent=4)

def store_webhook_message(content):
    """Store a webhook or bot message with a timestamp."""
    timestamp = time.time()
    webhook_cache.append((timestamp, content))

@tasks.loop(seconds=10)
async def cleanup_cache():
    """Periodic cleanup of old messages from the webhook cache."""
    current_time = time.time()
    while webhook_cache and current_time - webhook_cache[0][0] > CACHE_TTL:
        webhook_cache.popleft()
#endregion

#region ON_MESSAGE
@bot.event
async def on_message(message):
    """Track webhook or bot messages for content similarity checking."""
    if message.webhook_id or message.author.bot:
        store_webhook_message(message.content)
    if isinstance(message.channel, discord.DMChannel):
        # Forward the message to the log channel
        log_channel = bot.get_channel(123456789012345678903)
        if log_channel:
            # Format the log message
            timestamp = datetime.now().strftime('%d/%m/%y %I:%M:%S')
            log_message = (
                f"## VERIFICATION RESPONSE\n\nMessage: {message.content}\n-# Sent at: {timestamp}\n-# User: <@{message.author.id}>"
            )
            await log_channel.send(log_message)

    # Allow commands to be processed
    await bot.process_commands(message)

    # Check if the message starts with "YES" and mentions a user
    if message.content.startswith("YES") and message.mentions:
        mentioned_user = message.mentions[0]  # Get the first mentioned user

        # Get the guild (server) from the message
        guild = message.guild

        if guild is None:
            await message.channel.send("This command can only be used in a server.")
            return

        # Get the roles
        role_x = guild.get_role(unverified_role_id)  # Role to remove
        role_y = guild.get_role(verified_role_id)  # Role to add

        if role_x is None or role_y is None:
            await message.channel.send("Roles not found. Please check the role IDs.")
            return

        # Modify the mentioned user's roles
        try:
            if role_x in mentioned_user.roles:
                await mentioned_user.remove_roles(role_x)
            if role_y not in mentioned_user.roles:
                await mentioned_user.add_roles(role_y)

            # Send confirmation message
            await message.channel.send(
                f"{mentioned_user.mention} has been updated: Removed `{role_x.name}` and added `{role_y.name}`."
            )
        except discord.Forbidden:
            await message.channel.send("I don't have permission to manage roles for this user.")
        except discord.HTTPException as e:
            await message.channel.send(f"An error occurred: {e}")

    # Allow commands to be processed
    await bot.process_commands(message)
#endregion

#region LOGS
@bot.event
async def on_message_delete(message):
    """Handle deleted messages and log them with an embed."""
    public_log_channel_id = log_channels.get(str(message.guild.id))
    public_log_channel = bot.get_channel(public_log_channel_id)

    if public_log_channel:
        # Check if the message matches a cached webhook/bot message
        if await is_similar_to_webhook(message.content):
            # If a match is found, do not log the deleted message
            return  # Stop further processing if a match is found

        # Create the embed for the deleted message
        embed = discord.Embed(
            title=f"Message deleted in #{message.channel.name}",
            description=message.content or "[No content to display]",
            color=0xFF4500,  # Orange
            timestamp=discord.utils.utcnow(),
        )
        embed.add_field(name="Message ID", value=message.id, inline=False)
        embed.add_field(name="User ID", value=message.author.id, inline=False)
        embed.set_author(name=str(message.author), icon_url=message.author.avatar.url if message.author.avatar else "")
        embed.set_footer(text=f"Timestamp: {discord.utils.utcnow()}")
        if message.attachments:
         attachment_urls = "\n".join(attachment.url for attachment in message.attachments)
        embed.add_field(name="Attachments", value=attachment_urls, inline=False)

        # Log the embed in the public log channel
        await public_log_channel.send(embed=embed)


@bot.event
async def on_message_edit(before, after):
    """Log when a message is edited."""
    guild_id = str(before.guild.id)
    public_log_channel_id = log_channels.get(guild_id)
    public_log_channel = bot.get_channel(public_log_channel_id)

    if public_log_channel and before.content != after.content:
        embed = discord.Embed(
            title="Message Edited",
            description=f"In #{before.channel.name}",
            color=0xFFA500,  # Orange
            timestamp=discord.utils.utcnow(),
        )
        embed.add_field(name="Before", value=before.content or "[No content]", inline=False)
        embed.add_field(name="After", value=after.content or "[No content]", inline=False)
        embed.set_author(name=str(before.author), icon_url=before.author.avatar.url if before.author.avatar else "")
        embed.set_footer(text=f"Message ID: {before.id}")
        await public_log_channel.send(embed=embed)


@bot.event
async def on_member_update(before, after):
    """Log when a user's profile picture or name changes."""
    guild_id = str(before.guild.id)
    public_log_channel_id = log_channels.get(guild_id)
    public_log_channel = bot.get_channel(public_log_channel_id)

    if not public_log_channel:
        return

    # Log profile picture changes
    if before.avatar.url != after.avatar.url:
        embed = discord.Embed(
            title="Profile Picture Changed",
            color=0x3498DB,  # Blue
            timestamp=discord.utils.utcnow(),
        )
        embed.set_author(name=str(after), icon_url=after.avatar.url if after.avatar else "")
        embed.add_field(name="User ID", value=after.id, inline=True)
        embed.set_thumbnail(url=after.avatar.url if after.avatar else "")
        await public_log_channel.send(embed=embed)

    # Log username changes
    if before.name != after.name:
        embed = discord.Embed(
            title="Username Changed",
            color=0x00FF00,  # Green
            timestamp=discord.utils.utcnow(),
        )
        embed.add_field(name="Before", value=before.name, inline=False)
        embed.add_field(name="After", value=after.name, inline=False)
        embed.add_field(name="User ID", value=after.id, inline=False)
        embed.set_author(name=str(after), icon_url=after.avatar.url if after.avatar else "")
        await public_log_channel.send(embed=embed)


@bot.event
async def on_member_join(member):
    """Log when a user joins the server."""
    guild_id = str(member.guild.id)
    public_log_channel_id = log_channels.get(guild_id)
    public_log_channel = bot.get_channel(public_log_channel_id)

    if public_log_channel:
        embed = discord.Embed(
            title="Member Joined",
            color=0x00FF00,  # Green
            timestamp=discord.utils.utcnow(),
        )
        embed.add_field(name="User", value=str(member), inline=False)
        embed.add_field(name="User ID", value=member.id, inline=False)
        embed.set_thumbnail(url=member.avatar.url if member.avatar else "")
        await public_log_channel.send(embed=embed)


@bot.event
async def on_member_remove(member):
    """Log when a user leaves the server."""
    guild_id = str(member.guild.id)
    public_log_channel_id = log_channels.get(guild_id)
    public_log_channel = bot.get_channel(public_log_channel_id)

    if public_log_channel:
        embed = discord.Embed(
            title="Member Left",
            color=0xFF0000,  # Red
            timestamp=discord.utils.utcnow(),
        )
        embed.add_field(name="User", value=str(member), inline=False)
        embed.add_field(name="User ID", value=member.id, inline=False)
        embed.set_thumbnail(url=member.avatar.url if member.avatar else "")
        await public_log_channel.send(embed=embed)


@bot.event
async def on_guild_role_update(before, after):
    """Log role updates."""
    guild_id = str(before.guild.id)
    public_log_channel_id = log_channels.get(guild_id)
    public_log_channel = bot.get_channel(public_log_channel_id)

    if not public_log_channel:
        return

    # Log changes to roles
    if before.name != after.name:
        embed = discord.Embed(
            title="Role Name Changed",
            color=0x9B59B6,  # Purple
            timestamp=discord.utils.utcnow(),
        )
        embed.add_field(name="Before", value=before.name, inline=False)
        embed.add_field(name="After", value=after.name, inline=False)
        embed.add_field(name="Role ID", value=after.id, inline=False)
        await public_log_channel.send(embed=embed)

    if before.permissions != after.permissions:
        embed = discord.Embed(
            title="Role Permissions Updated",
            color=0xE67E22,  # Orange
            timestamp=discord.utils.utcnow(),
        )
        embed.add_field(name="Role", value=after.name, inline=False)
        await public_log_channel.send(embed=embed)
#endregion

#region EMBED
class PersistentView(View):
    def __init__(self):
        super().__init__(timeout=None)  # Timeout is set to None for persistence

        # Add the button to the view
        button = Button(label="Verify Here!", style=discord.ButtonStyle.primary, custom_id="verify_button")
        button.callback = self.button_callback
        self.add_item(button)

    # Button callback
    async def button_callback(self, interaction: discord.Interaction):
        try:
            # Send a DM to the user
            await interaction.user.send("Hello! Please answer the following questions to be verified. What you say here will be forwarded to the mods and you will be either accepted or denied within 24 hours or so. It is preferable for all your answers to be sent in one message but not required.\n\n## Questions:\n꒰ঌ favorite transformer? ✦.* \n\n꒰ঌ do you like crystals? ✦.*\n\n꒰ঌ how did you find out about our server? ✦.*")
            # Notify the user in the server that the DM was sent
            await interaction.response.send_message("Check your DMs!", ephemeral=True)
            
            log_channel = bot.get_channel(123456789012345678903)  # Replace with your log channel ID
            if log_channel:
                await log_channel.send(f"DM sent to <@{interaction.user.id}>")
        except discord.Forbidden:
            # If the bot cannot DM the user
            await interaction.response.send_message("I am unable to DM you. Please check your privacy settings or message a mod if it still does not work.", ephemeral=True)
            
            log_channel = bot.get_channel(123456789012345678903)  # Replace with your log channel ID
            if log_channel:
                await log_channel.send(f"ERROR. Failed to DM <@{interaction.user.id}>")
#endregion



@bot.command()
async def setlog(ctx, channel: discord.TextChannel):
    """Command to set the public log channel for the server."""
    guild_id = str(ctx.guild.id)
    log_channels[guild_id] = channel.id  # Store the log channel ID for this guild
    save_log_channels()  # Save to JSON file
    await ctx.send(f"Public log channel has been set to {channel.mention}")

@bot.command()
async def send(ctx):
    # Create the embed
    embed = discord.Embed(
        title="╴VERIFICATION٬⸻．✧ㆍ٬",
        description="To gain access to the main server, please click the button below. You will receive a DM and will be asked to answer some questions.\n ࣪             ₊  ׄ    ˖            ࣪ ₊      ࣪\n\n-# If you receive an 'Interaction Failed' message when clicking the button, please ping <@&123456789012345678903>.",
        color=discord.Color.blue()
    )

    # Send the embed with the persistent view
    await ctx.send(embed=embed, view=PersistentView())



#region WEBHOOK CHECKER
def levenshtein_similarity(str1, str2):
    """Calculate Levenshtein similarity ratio between two strings."""
    return Levenshtein.ratio(str1.strip().lower(), str2.strip().lower())

async def is_similar_to_webhook(deleted_content):
    """Check if deleted content is similar to recent webhook messages using Levenshtein."""
    if not deleted_content:  # Avoid empty content comparisons
        return False

    # Create a copy of the webhook_cache for safe iteration
    webhook_cache_copy = list(webhook_cache)

    for _, webhook_content in webhook_cache_copy:
        if not webhook_content:  # Skip empty webhook messages
            continue

        similarity_score = levenshtein_similarity(deleted_content, webhook_content)
        if similarity_score >= SIMILARITY_THRESHOLD:
            return True  # Similar message found
    return False  # No similar message found
#endregion

@bot.event
async def on_ready():
    print(f'Logged in as {bot.user}')
    cleanup_cache.start()  # Start the cache cleanup task
    bot.add_view(PersistentView())
    activity = discord.CustomActivity(name="quack quack mfkers")
    await bot.change_presence(activity=activity)


TOKEN = 'TOKEN'
bot.run(TOKEN)
