#NOTE. uuughhh idk man chat bots and cat pics and fictional language translaters 

#region IMPORTS
import asyncio
import atexit
from datetime import datetime
import discord
from discord.ext import commands
import openai
import os
import time 
from math import ceil 
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import base64
#endregion


#region REDACTED 
TOKEN = 'TOKEN'
openai.api_key = 'TOKEN'
openai_userkey = 'TOKEN'
#endregion


#region INTENTS
intents = discord.Intents.all()
intents.message_content = True
intents.guilds = True
intents.members = True 
intents.voice_states = True
#endregion


#region ID'S
USER_ID = 12345668929548783
CHANNEL_ID = 11234567890123456678  
MEMORY_LOG_CHANNEL_ID = 11234567890123456678
LOG_CHANNEL_ID = 11234567890123456678
MODERATION_CHANNEL_ID = 11234567890123456678
#endregion



#region CLARIFICATIONS
webhook_states = {}
short_term_memory = {}
long_term_memory = {}
PRICE_PER_1K_TOKENS_GPT_4O_INPUT = 0.00250
PRICE_PER_1K_TOKENS_GPT_4O_OUTPUT = 0.01000
LOG_FILE = 'log_number.txt'
#endregion


bot = commands.Bot(command_prefix='!', intents=intents)


async def send_long_message_in_chunks(webhook, content, username, avatar_url):
    CHUNK_SIZE = 1900  # Discord message limit is 2000 characters
    num_chunks = ceil(len(content) / CHUNK_SIZE)
    
    for i in range(num_chunks):
        chunk = content[CHUNK_SIZE * i : CHUNK_SIZE * (i + 1)]
        await webhook.send(content=chunk, username=username, avatar_url=avatar_url)

#region DEF
def setup_driver():
    edge_options = webdriver.EdgeOptions()
    edge_options.use_chromium = True
    edge_options.add_argument("--disable-extensions")  # Disable browser extensions
    edge_options.add_argument("--disable-infobars")    # Disable infobars
    edge_options.add_argument("--disable-logging")     # Reduce logging
    edge_options.add_argument("--no-sandbox")          # Better performance in some environments
    edge_options.add_argument("--headless")           # Uncomment for headless mode
    driver = webdriver.Edge(options=edge_options)
    return driver


async def get_cat_image():
    driver = setup_driver()
    try:
        driver.get("https://genrandom.com/cats/")

        # Wait for the image to load (shorter timeout for faster response)
        WebDriverWait(driver, 1).until(
            EC.presence_of_element_located((By.XPATH, "//img[contains(@class, 'css-8atqhb')]"))
        )

        # Locate the image element
        cat_image = driver.find_element(By.XPATH, "//img[contains(@class, 'css-8atqhb')]")

        # Extract the blob URL
        blob_url = cat_image.get_attribute("src")
        print(f"Blob URL: {blob_url}")

        # Use JavaScript to fetch the blob content and convert to Base64
        image_base64 = driver.execute_script("""
            const blobUrl = arguments[0];
            return fetch(blobUrl)
                .then(response => response.blob())
                .then(blob => new Promise((resolve, reject) => {
                    const reader = new FileReader();
                    reader.onloadend = () => resolve(reader.result);
                    reader.onerror = reject;
                    reader.readAsDataURL(blob);
                }));
        """, blob_url)

        # Return the base64 image data
        return image_base64

    except Exception as e:
        print(f"Error fetching cat image: {e}")
        return None

    finally:
        driver.quit()

def letter_to_emoji(letter, emoji_dict):
    return emoji_dict.get(letter.lower(), letter)
#endregion


#region DICTIONARY
aur_emoji_dict = {
    'a': '<:A_:1305853386029142056>', 'b': '<:B_:1305853406333763644>', 'c': '<:C_:1305853426911154208>',
    'd': '<:D_:1305853441561727031>', 'e': '<:E_:1305853455360983050>', 'f': '<:F_:1305853470858805250>',
    'g': '<:G_:1305853483898896384>', 'h': '<:H_:1305853493415907348>', 'i': '<:I_:1305853505361412148>',
    'j': '<:J_:1305853516065017887>', 'k': '<:K_:1305853526789980230>', 'l': '<:L_:1305853537380466708>',
    'm': '<:M_:1305853549640421416>', 'n': '<:N_:1305853564836511754>', 'o': '<:O_:1305853576547012639>',
    'p': '<:P_:1305853663696130088>', 'q': '<:Q_:1305853682956369982>', 'r': '<:R_:1305853697288310835>',
    's': '<:S_:1305853708147363840>', 't': '<:T_:1305853720659099708>',
    'u': '<:U_:1305853730842738719>', 'v': '<:V_:1305853740968054824>',
    'w': '<:W_:1305853754783957043>', 'x': '<:X_:1305853766821609643>', 'y': '<:Y_:1305852690492030976>',
    'z': '<:Z_:1305853802242641961>', ' ': '<:blank:1305855223671033886>', '!': '<:exclamation_mark:1306129784211771392>', ',': "<:comma:1306132797341306942>", '.': "<:fullstop:1306133467532103730>", '-': "<:dash:1306131442425663538>",   # Use blank emoji for spaces
}

cyb_emoji_dict = {
    'a': '<:TFA:1306086558289629185>', 'b': '<:TFB:1306086592418680922>', 'c': '<:TFC:1306086659896643624>',
    'd': '<:TFD:1306086677546012763>', 'e': '<:TFE:1306086689105641480>', 'f': '<:TFF:1306086704746070139>',
    'g': '<:TFG:1306086721364033566>', 'h': '<:TFH:1306086754020753449>', 'i': '<:TFI:1306086766532362260>',
    'j': '<:TFJ:1306086790146555945>', 'k': '<:TFK:1306086800820928522>', 'l': '<:TFL:1306086810790793267>',
    'm': '<:TFM:1306086820831821906>', 'n': '<:TFN:1306086836363464724>', 'o': '<:TFO:1306086844810657863>',
    'p': '<:TFP:1306086853530882122>', 'q': '<:TFQ:1306086863643345028>', 'r': '<:TFR:1306086875622019072>',
    's': '<:TFS:1306086886091128925>', 't': '<:TFT:1306086904034492416>',
    'u': '<:TFU:1306086912129236994>', 'v': '<:TFV:1306086923172974612>',
    'w': '<:TFW:1306086938314276885>', 'x': '<:TFX:1306086948229746698>', 'y': '<:TFY:1306086957499023431>',
    'z': '<:TFZ:1306086971705397318>', ' ': '<:blank:1305855223671033886>', '!': '<:exclamation_mark:1306129784211771392>', ',': "<:comma:1306132797341306942>", '.': "<:fullstop:1306133467532103730>", '-': "<:dash:1306131442425663538>"  # Use blank emoji for spaces
}
#endregion


#region PER & WEB LOAD
def load_personality(file_name):
    # Base directory where all personality files are stored
    base_directory = r"D:\personality files"

    # Construct the full path to the personality file
    file_path = os.path.join(base_directory, file_name)

    # Check if the file exists
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"The file '{file_name}' was not found in '{base_directory}'.")

    # Read and return the file's content
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            return file.read()
    except UnicodeDecodeError:
        # Fallback to ISO-8859-1
        with open(file_path, "r", encoding="iso-8859-1") as file:
            return file.read()
async def get_or_create_webhook(channel, webhook_name, personality_file, avatar_url):
    webhooks = await channel.webhooks()
    for wh in webhooks:
        if wh.name == webhook_name and wh.user == bot.user:
            return wh
    webhook = await channel.create_webhook(name=webhook_name)
    webhook_states[webhook.id] = {
        'personality': load_personality(personality_file),
        'avatar_url': avatar_url
    }
    return webhook
#endregion


#region CHAT LOGS
def get_last_log_number():
    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, 'r') as file:
            content = file.read().strip()
            if content.isdigit():  
                return int(content)
            else:
                
                return 0
    else:
        return 0

def save_log_number(log_number):
    with open(LOG_FILE, 'w') as file:
        file.write(str(log_number))
def get_next_log_number():
    last_log_number = get_last_log_number()
    next_log_number = last_log_number + 1
    save_log_number(next_log_number)
    return next_log_number
async def log_webhook_response(initiator, message, responder, response, channel, guild, cost_log):
    log_number = get_next_log_number()
    log_channel = bot.get_channel(LOG_CHANNEL_ID)

    if log_channel:
        # Create the log message
        log_message = (
            f"## Response Log #{log_number}"
            f"\nSent in: {guild.name} #{channel.name} at {datetime.now().strftime('%d/%m/%y %I:%M:%S')} AEDT"
            f"\nUser: {initiator}\nPrompt: {message.content}"
            f"\nResponse: **{responder}** responded with:\n'{response}'"
            f"\nCost: ${cost_log['total_cost']:.4f}"
            f"\nInput Tokens: {cost_log['input_tokens']}, Output Tokens: {cost_log['output_tokens']}"
        )

        # Check if the log message is too long
        if len(log_message) > 2000:
            log_file_path = 'turbo_chat_logs.txt'  # Define the file path

            # Write the log message to a file
            with open(log_file_path, 'w') as file:
                file.write(log_message)
            
            # Send the file to the log channel
            await log_channel.send(
                content="The log message was too long and has been attached as a file:",
                file=discord.File(log_file_path)
            )
        else:
            # Create an embed for shorter messages
            embed = discord.Embed(
                title=f"**Response Log #{log_number}**",
                description=f"Bot used: {responder}",
                color=discord.Color.blue(),
                timestamp=discord.utils.utcnow()
            )
            embed.add_field(
                name="Sent in:",
                value=f"{guild.name}\nhttps://discord.com/channels/{guild.id}/{channel.id}",
                inline=False
            )
            embed.add_field(name="User:", value=f"{initiator.mention}", inline=False)
            embed.add_field(
                name="Prompt:",
                value=f"[{message.content}](https://discord.com/channels/{guild.id}/{channel.id}/{message.id})",
                inline=False
            )
            embed.add_field(name="Response:", value=f"{response}", inline=False)
            embed.add_field(name="Cost:", value=f"${cost_log['total_cost']:.4f}", inline=False)
            embed.add_field(
                name="Tokens:",
                value=f"Input Tokens: {cost_log['input_tokens']}, Output Tokens: {cost_log['output_tokens']}",
                inline=False
            )

            # Send the embed
            await log_channel.send(embed=embed)



def calculate_cost(token_usage):
    input_tokens = token_usage['prompt_tokens']
    output_tokens = token_usage['completion_tokens']
    total_tokens = token_usage['total_tokens']
    
    input_cost = (input_tokens / 1000) * PRICE_PER_1K_TOKENS_GPT_4O_INPUT
    output_cost = (output_tokens / 1000) * PRICE_PER_1K_TOKENS_GPT_4O_OUTPUT
    total_cost = input_cost + output_cost
    
    return {
        'input_tokens': input_tokens,
        'output_tokens': output_tokens,
        'total_tokens': total_tokens,
        'input_cost': input_cost,
        'output_cost': output_cost,
        'total_cost': total_cost
    }
#endregion


#region MEMORY
def clear_memory(user_id):
    """Clears the stored memory for a specific user."""
    if user_id in short_term_memory:
        short_term_memory.pop(user_id)
@bot.command(name='forget')

async def clear_memory_command(ctx):
    """Command to clear the user's memory."""
    user_id = ctx.author.id
    clear_memory(user_id)
    await ctx.send(f"Memory cleared for user {ctx.author.display_name}.")


def add_to_memory(user_id, interaction):
    """Adds user interaction to short-term memory."""
    if user_id not in short_term_memory:
        short_term_memory[user_id] = []
    
    short_term_memory[user_id].append(interaction)

    # Limit the size of short-term memory (for example, 10 messages)
    if len(short_term_memory[user_id]) > MEMORY_SIZE:
        short_term_memory[user_id].pop(0)

def add_to_long_term_memory(user_id, interaction):
    """Adds specific interactions to long-term memory that doesn't expire."""
    if user_id not in long_term_memory:
        long_term_memory[user_id] = []
    
    long_term_memory[user_id].append(interaction)

@bot.command(name='remember')
async def remember_command(ctx):
    """Command for users to ask the bot to remember the last interaction."""
    user_id = ctx.author.id

    # Check if there are recent messages to remember

    if user_id in short_term_memory and short_term_memory[user_id]:
        interaction = short_term_memory[user_id][-1]  # Get the most recent interaction
        add_to_long_term_memory(user_id, interaction)
        await ctx.send(f"Got it! I'll remember this: '{interaction}'")
    else:
        await ctx.send("There's nothing recent to remember.")

MEMORY_SIZE = 10
def add_to_memory(user_id, interactions):
    if user_id not in short_term_memory:
        short_term_memory[user_id] = []
    short_term_memory[user_id].append(user_id)
    if len(short_term_memory[user_id]) > MEMORY_SIZE:
        short_term_memory[user_id].pop(0)

async def log_memory_to_channel(user, message_content, answer, user_id,):
    memory_log_channel = bot.get_channel(MEMORY_LOG_CHANNEL_ID)
    if memory_log_channel:
        interactions = short_term_memory.get(user_id, [])
        memory_log_message = f"## Memory Log for User {user} ##\n"
        for i, interaction in enumerate(interactions):
            memory_log_message = (f"\nInteraction {i + 1}:\n"
                                   f"User Message: {message_content}\n"
                                   f"Bot Response: '{answer}' \n")
        if len(memory_log_message) > 2000:
            with open(f'memory_log_user_{user}.txt', 'w') as file:
                file.write(memory_log_message)

            if message_content in interaction:
                message_content = interaction['message_content']
            else:
                message_content = 'No content available'
            await memory_log_channel.send(file=discord.File(f'memory_log_user_{user}.txt'))
        else:
            await memory_log_channel.send(memory_log_message)


#MOD HERE

   
def get_memory(user_id):
    return short_term_memory.get(user_id, [])

# Store memory with timestamps (last interaction time)

short_term_memory = {}
MEMORY_EXPIRY_TIME = 86400  # Memory expiry time in seconds (24 hours)

def add_to_memory(user_id, interaction):
    """Adds user interaction to memory and tracks when it was added."""
    current_time = time.time()  # Get the current time
    if user_id not in short_term_memory:
        short_term_memory[user_id] = []
    # Add the interaction with the current timestamp
    short_term_memory[user_id].append({"interaction": interaction, "timestamp": current_time})
    # Remove expired memories
    short_term_memory[user_id] = [
        entry for entry in short_term_memory[user_id]
        if current_time - entry["timestamp"] <= MEMORY_EXPIRY_TIME
    ]

def get_memory(user_id):
    """Retrieve memory if it's within the expiry time."""
    current_time = time.time()
    if user_id in short_term_memory:
        # Only return recent memory
        return [
            entry["interaction"] for entry in short_term_memory[user_id]
            if current_time - entry["timestamp"] <= MEMORY_EXPIRY_TIME
        ]
    return []
# Add a cron job or background task that periodically checks for expired memories
#endregion


#region IS FOR BOT
def is_message_for_bot(message):
    # Check if bot is mentioned in the message
    if bot.user.mention in message.content:
        return True
    
    # Check if the message starts with the bot's command prefix (e.g., "!") or specific keywords
    prefixes = ["!", "hey shadow, ", "hey blitzwing, ", "hey mori, ", "oi turbo, ", "secretjake, ", "hey tod, ", "hey tarn, ", "hey shockwave, ", "hey starscream, ", "hey jake, ", "hey bee, ", "hey primus, ", "hey unicron, ", "hey darius, ", "hey conspire, ", "hey anagram, ", "hey alpha, " ] # Customize your bot's prefixes or keywords
    return any(message.content.lower().startswith(prefix) for prefix in prefixes)
#endregion


#region PREFIXES
@bot.event
async def on_message(message):
    if message.author == bot.user: # or message.webhook_id:
        return
    if message.content.lower().startswith("cat pic"):
        await message.channel.send("Finding silly kitties...")

        # Fetch the cat image
        cat_image_base64 = await get_cat_image()

        if cat_image_base64:
            try:
                # Save the image locally
                with open("cat_image.png", "wb") as file:
                    file.write(base64.b64decode(cat_image_base64.split(",")[1]))
                # Send the image
                await message.channel.send(file=discord.File("cat_image.png"))
            except Exception as e:
                await message.channel.send("Failed to process the cat image.")
                print(f"Error saving or sending the image: {e}")
        else:
            await message.channel.send("Sorry, I couldn't fetch a cat picture. Please try again later!")
    
    elif message.content.startswith("!aur"):
        text = message.content[len("!aur "):].strip()
        translated = "".join(letter_to_emoji(char, aur_emoji_dict) for char in text)
        await message.channel.send(translated[:2000])
        
    elif message.content.startswith("!cyb"):
        text = message.content[len("!cyb "):].strip()
        translated = "".join(letter_to_emoji(char, cyb_emoji_dict) for char in text)
        await message.channel.send(translated[:2000])
        await bot.process_commands(message)
    else:
        prefixes = {
            "hey shadow, ": ("shadow_personality.txt", "Shadow the Hegeog", "https://cdn.discordapp.com/attachments/1021442882302906378/1278505350986731521/SPOILER_29.08.24.png?ex=66d10c65&is=66cfbae5&hm=2ac2fc0ca75d8040acc45a3aa56f90aeb86922c84ec095a91eabfa8e1e00246c&"),
            "hey mori, ": ("mori_personality.txt", "Mori", "https://media.discordapp.net/attachments/1273635088554524834/1278482876668579920/b9c479e2995d297cee90a0075efea098.jpg?ex=66d0f776&is=66cfa5f6&hm=05c0b6513b9ac5aae8cee5af57d835ac239200ddd8b0548a99c7e527940dd666&format=webp&width=553&height=553&"),
            "hey blitzwing, ": ("blitzwing_personality.txt", "Blitzwing", "https://64.media.tumblr.com/ff7ee7db2ec8e91bdd5a8102701c74f1/tumblr_inline_p5gp0lvl7E1rh5czt_400.gif"),
            "oi turbo, ": ("turbo_personality.txt", "Turbo (NON-CHARACTER)", "https://cdn.discordapp.com/attachments/1275266563687317599/1275972157012443326/images.jpeg?ex=66c7d52c&is=66c683ac&hm=d28230ba4e5f55c8dbc39740b04a0f7b769c1ff86bb73d5308138ab7bbf3be6d&"),
            "secret jake, ": ("jakeperalta_personality.txt", "Jake Peralta", "https://cdn.mos.cms.futurecdn.net/TzWUpCYFrZehFqdVcbtb9X.jpg"),
            "hey alpha, ": ("alpha_personality.txt", "Alpha Daddy", "https://media.discordapp.net/attachments/1106709604563431476/1278936446341877790/2Q.png?ex=66d29de2&is=66d14c62&hm=ffa13ed472bcfc9e06253f460034c88ff357b6ccd8892892451d10502e3551ab&=&format=webp&quality=lossless&width=281&height=227"),
            "hey thorin, ": ("thorin_personality.txt", "Thorin Oakenshield", "https://images.hellomagazine.com/horizon/43/2e7e7e136efb-richard-armitage-as-thorin-oakenshield.jpg"),
            "hey bo, ": ("bo_personality.txt", "Bo (Caregiver)", "https://cdn.discordapp.com/attachments/1067791061474361364/1279053927672844330/IMG_2073.jpg?ex=66d30b4c&is=66d1b9cc&hm=ded7559c59808f022d2770fb8ea3e75823cfc191a1012a2d41bc77e1eb4c7be2&"),
            "hey tod, ": ("tod_personality.txt", "Creepy Tod From IT", "https://c8.alamy.com/comp/BMP73P/portrait-of-an-average-man-in-a-blank-white-t-shirt-BMP73P.jpg"),
            "hey tarn, ": ("tarn_personality.txt", "Tarn", "https://cdn.discordapp.com/attachments/1284652106057388113/1284677797968740392/IMG_3593.jpg?ex=66e780ef&is=66e62f6f&hm=a972ff660ff0fe7e0051a2c0f7cb5fb75430011b6b923dd21b938c0b65409300&"),
            "hey shockwave, ": ("shockwave_personality.txt", "Shockwave", "https://cdn.discordapp.com/attachments/1217616666779717675/1284708553554132992/BC07EC7D-7DD0-4D9D-AD2D-8498DADDA17A.jpg?ex=66e79d93&is=66e64c13&hm=171b8d2fd80e5d2c6e2b1d04aff79eba80139eec56785d730a9e70b7483b40f3&"),
            "hey starscream, ": ("cunty_personality.txt", "Starscream", "https://cdn.discordapp.com/attachments/1285081604594860053/1290450625058050068/b7244d891b5b7990dfdbc3f2f02520f9.png?ex=66fc814c&is=66fb2fcc&hm=58b6e310eaf4435b8be6163c3ed8cce732c67fd02809eee931abcb7f0ae17286&"),
            "hey jake, ": ("jakeperalta1_personality.txt", "Jake Peralta", "https://cdn.mos.cms.futurecdn.net/TzWUpCYFrZehFqdVcbtb9X.jpg"),
            "hey bee, ": ("feralbee_personality.txt", "Feral Bumblebee", "https://cdn.discordapp.com/attachments/1280333275067584554/1285492193120751666/IMG_2890.png?ex=66ea7766&is=66e925e6&hm=324e58e4b9f0822172c75957a30f09692f6332c43c86903fdaf5406c44e3934b&"),
            "hey freakscream, ": ("freakscream.txt",  "𝓕𝓻𝓮𝓪𝓴scream", "https://cdn.discordapp.com/attachments/1266103559863402568/1289063953615294496/GMwMAkRXcAIfBrU.png?ex=66f775dc&is=66f6245c&hm=9793c189c62c229a71ce881d66e089513f8e40ee8315d65245da1a1fb3757904&"),
            "hey primus, ": ("namegen.txt",  "Primus", "https://tfwiki.net/mediawiki/images2/thumb/1/16/PredaconsRisingWellofAllSparks.jpg/300px-PredaconsRisingWellofAllSparks.jpg"),
            "hey unicron, ": ("unicron.txt",  "Unicron/Sphericon", "https://i.redd.it/cowqriae6j171.jpg"),
            "hey darius, ": ("darius.txt",  "Darius (OC)", "https://cdn.discordapp.com/attachments/1291371575320252416/1291374399236345947/IMG_1547.png?ex=66ffdda1&is=66fe8c21&hm=d6034dbdbb7f13381017ea00cd77344ac663bc101ec34f34bbb73391a8aac75f&"),
            "hey conspire, ": ("gay_conspirer.txt",  "Conspirer", "https://cdn.discordapp.com/attachments/1296838375332118608/1307275079675285524/2yt0w8ptozm71.png?ex=6739b64a&is=673864ca&hm=afc91b1d9460a96e07eacb562a06b6b40e01587d0491834e003ae3ea926e224a&"),
            "hey anagram, ": ("anagram.txt",  "Anagram.", "https://cdn.discordapp.com/attachments/1296838375332118608/1307942233424527380/360.png?ex=673c23a0&is=673ad220&hm=2c73df8a54e1178aa25ebafee66fe44d853f3e50d6ff3cef2a2a1cb66db55e68&"),
        }
        

        user_id = message.author.id
        message_content = message.content.strip()
        user = message.author
    if message.author == bot.user or message.webhook_id:
        return

    # Check if the message is directed at the bot
    if not is_message_for_bot(message):
        return

    user_id = message.author.id
    message_content = message.content.strip()
#endregion
    
#region no memory
    for prefix, (personality_file, webhook_name, avatar_url) in prefixes.items():
        if message.content.lower().startswith(prefix):
            query = message.content[len(prefix):].strip()

            # Handle Primus and Unicron/Sphericon separately (without memory retention)
            if webhook_name in ["Primus", "Unicron/Sphericon", "Conspirer", "Anagram"]:
                personality = load_personality(personality_file)
                system_message = {"role": "system", "content": personality}

                try:
                    # Generate a response using OpenAI without memory interactions
                    response = openai.ChatCompletion.create(
                        model="gpt-4o-2024-08-06",
                        temperature=1,
                        messages=[system_message, {"role": "user", "content": query}],
                        max_tokens=1000
                    )

                    if not response['choices']:
                        await message.channel.send("No valid response generated.")
                        return

                    answer = response['choices'][0]['message']['content'].strip()
                    token_usage = response['usage']
                    cost_log = calculate_cost(token_usage)

                    # Get webhook and send the response
                    webhook = await get_or_create_webhook(message.channel, webhook_name, personality_file, avatar_url)
                    await send_long_message_in_chunks(webhook, answer, username=webhook_name, avatar_url=avatar_url)

                    # Log the response without retaining memory
                    await log_webhook_response(
    initiator=message.author,  # The user who sent the message
    message=message,           # The full discord.Message object
    responder=webhook_name,    # The bot name or webhook responder
    response=answer,           # The bot's response
    channel=message.channel,   # The channel where the message was sent
    guild=message.guild,       # The guild (server) the message was sent in
    cost_log=cost_log          # The cost log for token usage
)


                except openai.error.OpenAIError as e:
                    await message.channel.send("Sorry, Turbo ran into an error while processing the request.")
                return
#endregion

#region memory
            # For all other webhooks, handle memory retention
            personality = load_personality(personality_file)
            system_message = {"role": "system", "content": personality}

            # Retrieve past memory interactions for the user
            previous_interactions = get_memory(user_id)

            # Create the conversation history based on memory
            conversation_history = [
                {"role": "user", "content": interaction["message_content"]} for interaction in previous_interactions
            ] + [{"role": "user", "content": query}]

            try:
                # Generate a response using OpenAI with the conversation history
                response = openai.ChatCompletion.create(
                    model="gpt-4o-2024-08-06",
                    temperature=1,
                    messages=[system_message] + conversation_history,
                    max_tokens=5000
                )

                if not response['choices']:
                    await message.channel.send("No valid response generated.")
                    return

                answer = response['choices'][0]['message']['content'].strip()
                token_usage = response['usage']
                cost_log = calculate_cost(token_usage)

                # Get webhook and send the response
                webhook = await get_or_create_webhook(message.channel, webhook_name, personality_file, avatar_url)
                await send_long_message_in_chunks(webhook, answer, username=webhook_name, avatar_url=avatar_url)

                # Log the response and cost
                await log_webhook_response(
    initiator=message.author,  # The user who sent the message
    message=message,           # The full discord.Message object
    responder=webhook_name,    # The bot name or webhook responder
    response=answer,           # The bot's response
    channel=message.channel,   # The channel where the message was sent
    guild=message.guild,       # The guild (server) the message was sent in
    cost_log=cost_log          # The cost log for token usage
)


                # Store the current interaction in memory
                add_to_memory(user_id, {"message_content": query, "response": answer})

                # Log memory to a specific channel
                await log_memory_to_channel(user, message_content, answer, user_id)

            except openai.error.OpenAIError as e:
                await message.channel.send("Sorry, Turbo ran into an error while processing the request.")

    await bot.process_commands(message)
#endregion

@bot.command(name='whack')
async def ping(ctx):
    await ctx.send('https://cdn.discordapp.com/attachments/1106745772785029192/1303186865934827530/4C415467-79CD-4028-A394-B14BC3A92C14-ezgif.com-resize_1.gif?ex=672ad6d8&is=67298558&hm=b32621e5bfac13d37135899092d96a23041937e6798a884163a46cd8b4ea9e59&')

#region SHUT DOWN
@bot.event
async def on_ready():
    print(f'{bot.user} has connected to Discord!')
def on_shutdown():
    channel = bot.get_channel(LOG_CHANNEL_ID)
    if channel:
        asyncio(channel.send("Turbo is going offline."), bot.loop).result()
    bot.loop.run_until_complete(bot.close())
atexit.register(on_shutdown)
bot.run(TOKEN)
#endregion
